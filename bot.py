import os
import logging
import re
from datetime import datetime, timedelta
from telegram import Update, ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, CallbackQueryHandler, ContextTypes, filters, ConversationHandler
import sqlite3

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–≥–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', 
    level=logging.DEBUG
)
logger = logging.getLogger(__name__)

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è ConversationHandler
(ADDING_CLIENT_NAME, ADDING_CLIENT_PHONE, 
 SELECTING_CLIENT_FOR_RECEIPT, UPLOADING_RECEIPT, ADDING_RECEIPT_AMOUNT, ADDING_DEBT_DAYS,
 SELECTING_CLIENT_FOR_VIEW,
 SELECTING_CLIENT_FOR_DELETE, SELECTING_RECEIPT_FOR_DELETE,
 SELECTING_CLIENT_FOR_PAYMENT, ADDING_PAYMENT_AMOUNT) = range(11)

def get_connection():
    """–°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö."""
    try:
        return sqlite3.connect('debt_bot.db')
    except sqlite3.Error as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: {e}")
        raise

def init_db():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–∞–±–ª–∏—Ü –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö."""
    try:
        conn = get_connection()
        cur = conn.cursor()
        
        # –¢–∞–±–ª–∏—Ü–∞ –∫–ª–∏–µ–Ω—Ç–æ–≤
        cur.execute('''CREATE TABLE IF NOT EXISTS clients
                   (id INTEGER PRIMARY KEY AUTOINCREMENT,
                    name TEXT NOT NULL,
                    phone TEXT NOT NULL)''')
        
        # –¢–∞–±–ª–∏—Ü–∞ —á–µ–∫–æ–≤
        cur.execute('''CREATE TABLE IF NOT EXISTS receipts
                   (id INTEGER PRIMARY KEY AUTOINCREMENT,
                    client_id INTEGER,
                    photo_id TEXT,
                    amount REAL,
                    debt_days INTEGER,
                    date_added TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                    FOREIGN KEY (client_id) REFERENCES clients (id))''')
        
        # –¢–∞–±–ª–∏—Ü–∞ –ø–ª–∞—Ç–µ–∂–µ–π
        cur.execute('''CREATE TABLE IF NOT EXISTS payments
                   (id INTEGER PRIMARY KEY AUTOINCREMENT,
                    client_id INTEGER,
                    amount REAL,
                    date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                    FOREIGN KEY (client_id) REFERENCES clients (id))''')
        
        conn.commit()
    except sqlite3.Error as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")
        raise
    finally:
        if conn:
            cur.close()
            conn.close()

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {update.effective_user.id} –∑–∞–ø—É—Å—Ç–∏–ª –±–æ—Ç–∞")
    
    keyboard = [
        [KeyboardButton("üë§ –î–æ–±–∞–≤–∏—Ç—å –∫–ª–∏–µ–Ω—Ç–∞"), KeyboardButton("üìÑ –î–æ–±–∞–≤–∏—Ç—å —á–µ–∫")],
        [KeyboardButton("üëÅ –ü—Ä–æ—Å–º–æ—Ç—Ä —á–µ–∫–æ–≤"), KeyboardButton("‚è∞ –ü—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ –¥–æ–ª–≥–∏")],
        [KeyboardButton("üóë –£–¥–∞–ª–µ–Ω–∏–µ —á–µ–∫–æ–≤"), KeyboardButton("üí∞ –û–ø–ª–∞—Ç–∞ –¥–æ–ª–≥–æ–≤")]
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    
    await update.message.reply_text(
        '–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:',
        reply_markup=reply_markup
    )

async def add_client_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ù–∞—á–∞–ª–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞"""
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {update.effective_user.id} –Ω–∞—á–∞–ª –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞")
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –∏–º—è –∫–ª–∏–µ–Ω—Ç–∞:")
    return ADDING_CLIENT_NAME

async def add_client_name(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–º–µ–Ω–∏ –∫–ª–∏–µ–Ω—Ç–∞"""
    name = update.message.text.strip()
    
    if not name or len(name) > 100:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∏–º—è (1-100 —Å–∏–º–≤–æ–ª–æ–≤).")
        return ADDING_CLIENT_NAME
    
    context.user_data['client_name'] = name
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∫–ª–∏–µ–Ω—Ç–∞:")
    return ADDING_CLIENT_PHONE

async def add_client_phone(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞"""
    phone = update.message.text.strip()
    name = context.user_data['client_name']
    
    try:
        conn = get_connection()
        cur = conn.cursor()
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞
        cur.execute("SELECT id FROM clients WHERE name = ? AND phone = ?", (name, phone))
        existing_client = cur.fetchone()
        
        if existing_client:
            await update.message.reply_text(f"–ö–ª–∏–µ–Ω—Ç {name} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!")
            return ConversationHandler.END
        
        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞
        cur.execute("INSERT INTO clients (name, phone) VALUES (?, ?)", (name, phone))
        conn.commit()
        logger.info(f"–î–æ–±–∞–≤–ª–µ–Ω –Ω–æ–≤—ã–π –∫–ª–∏–µ–Ω—Ç: {name}, {phone}")
    except sqlite3.Error as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∫–ª–∏–µ–Ω—Ç–∞: {e}")
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∫–ª–∏–µ–Ω—Ç–∞.")
        return ConversationHandler.END
    finally:
        if conn:
            cur.close()
            conn.close()
    
    keyboard = [
        [KeyboardButton("üë§ –î–æ–±–∞–≤–∏—Ç—å –∫–ª–∏–µ–Ω—Ç–∞"), KeyboardButton("üìÑ –î–æ–±–∞–≤–∏—Ç—å —á–µ–∫")],
        [KeyboardButton("üëÅ –ü—Ä–æ—Å–º–æ—Ç—Ä —á–µ–∫–æ–≤"), KeyboardButton("‚è∞ –ü—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ –¥–æ–ª–≥–∏")],
        [KeyboardButton("üóë –£–¥–∞–ª–µ–Ω–∏–µ —á–µ–∫–æ–≤"), KeyboardButton("üí∞ –û–ø–ª–∞—Ç–∞ –¥–æ–ª–≥–æ–≤")]
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    
    await update.message.reply_text(
        f"–ö–ª–∏–µ–Ω—Ç {name} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!",
        reply_markup=reply_markup
    )
    return ConversationHandler.END

async def add_receipt_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —á–µ–∫–∞ - –≤—ã–±–æ—Ä –∫–ª–∏–µ–Ω—Ç–∞"""
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {update.effective_user.id} –Ω–∞—á–∞–ª –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —á–µ–∫–∞")
    
    try:
        conn = get_connection()
        cur = conn.cursor()
        cur.execute("SELECT id, name FROM clients")
        clients = cur.fetchall()
    except sqlite3.Error as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –∫–ª–∏–µ–Ω—Ç–æ–≤: {e}")
        await update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∫–ª–∏–µ–Ω—Ç–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return ConversationHandler.END
    finally:
        if conn:
            cur.close()
            conn.close()
    
    if not clients:
        await update.message.reply_text("–°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å—Ç–µ –∫–ª–∏–µ–Ω—Ç–∞!")
        return ConversationHandler.END
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–ª–∏–µ–Ω—Ç–∞–º–∏
    keyboard = []
    for client_id, client_name in clients:
        keyboard.append([InlineKeyboardButton(client_name, callback_data=f'client_{client_id}')])
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.message.reply_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –∫–ª–∏–µ–Ω—Ç–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —á–µ–∫–∞:",
        reply_markup=reply_markup
    )
    return SELECTING_CLIENT_FOR_RECEIPT

async def select_client_for_receipt(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∫–ª–∏–µ–Ω—Ç–∞ –¥–ª—è —á–µ–∫–∞"""
    query = update.callback_query
    await query.answer()
    
    try:
        client_id = int(query.data.split('_')[1])
        context.user_data['selected_client_id'] = client_id
        
        await query.edit_message_text("–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ —á–µ–∫–∞:")
        return UPLOADING_RECEIPT
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –∫–ª–∏–µ–Ω—Ç–∞: {e}")
        await query.edit_message_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return ConversationHandler.END

async def handle_receipt_photo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ —á–µ–∫–∞"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Ñ–∞–π–ª —Å –Ω–∞–∏–±–æ–ª—å—à–∏–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ–º
        photo = update.message.photo[-1]
        context.user_data['receipt_photo_id'] = photo.file_id
        
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É —á–µ–∫–∞:")
        return ADDING_RECEIPT_AMOUNT
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–æ—Ç–æ —á–µ–∫–∞: {e}")
        await update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ñ–æ—Ç–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return ConversationHandler.END

async def add_receipt_amount(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—É–º–º—ã —á–µ–∫–∞"""
    try:
        amount = float(update.message.text.replace(',', '.'))
        
        if amount <= 0:
            await update.message.reply_text("–°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–π. –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É:")
            return ADDING_RECEIPT_AMOUNT
        
        context.user_data['receipt_amount'] = amount
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –¥–ª—è –æ–ø–ª–∞—Ç—ã –¥–æ–ª–≥–∞:")
        return ADDING_DEBT_DAYS
    except ValueError:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É:")
        return ADDING_RECEIPT_AMOUNT

async def add_receipt_days(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —á–µ–∫–∞"""
    conn = None
    try:
        days = int(update.message.text)
        
        if days <= 0:
            await update.message.reply_text("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º. –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ:")
            return ADDING_DEBT_DAYS
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        client_id = context.user_data.get('selected_client_id')
        photo_id = context.user_data.get('receipt_photo_id')
        amount = context.user_data.get('receipt_amount')
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –µ—Å—Ç—å
        if not all([client_id, photo_id, amount]):
            await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ù–∞—á–Ω–∏—Ç–µ –ø—Ä–æ—Ü–µ—Å—Å –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —á–µ–∫–∞ –∑–∞–Ω–æ–≤–æ.")
            return ConversationHandler.END
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —á–µ–∫ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        conn = get_connection()
        cur = conn.cursor()
        cur.execute("""
            INSERT INTO receipts 
            (client_id, photo_id, amount, debt_days, date_added)
            VALUES (?, ?, ?, ?, ?)
        """, (client_id, photo_id, amount, days, datetime.now()))
        conn.commit()
        
        logger.info(f"–î–æ–±–∞–≤–ª–µ–Ω –Ω–æ–≤—ã–π —á–µ–∫ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞ {client_id}")
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        keyboard = [
            [KeyboardButton("üë§ –î–æ–±–∞–≤–∏—Ç—å –∫–ª–∏–µ–Ω—Ç–∞"), KeyboardButton("üìÑ –î–æ–±–∞–≤–∏—Ç—å —á–µ–∫")],
            [KeyboardButton("üëÅ –ü—Ä–æ—Å–º–æ—Ç—Ä —á–µ–∫–æ–≤"), KeyboardButton("‚è∞ –ü—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ –¥–æ–ª–≥–∏")],
            [KeyboardButton("üóë –£–¥–∞–ª–µ–Ω–∏–µ —á–µ–∫–æ–≤"), KeyboardButton("üí∞ –û–ø–ª–∞—Ç–∞ –¥–æ–ª–≥–æ–≤")]
        ]
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        
        await update.message.reply_text(
            "–ß–µ–∫ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!",
            reply_markup=reply_markup
        )
        
        return ConversationHandler.END
    
    except ValueError:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π:")
        return ADDING_DEBT_DAYS
    except sqlite3.Error as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —á–µ–∫–∞: {e}")
        await update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —á–µ–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return ConversationHandler.END
    finally:
        if conn:
            conn.close()

async def view_receipts_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ù–∞—á–∞–ª–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —á–µ–∫–æ–≤ - –≤—ã–±–æ—Ä –∫–ª–∏–µ–Ω—Ç–∞"""
    try:
        conn = get_connection()
        cur = conn.cursor()
        cur.execute("SELECT id, name FROM clients")
        clients = cur.fetchall()
    except sqlite3.Error as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –∫–ª–∏–µ–Ω—Ç–æ–≤: {e}")
        await update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∫–ª–∏–µ–Ω—Ç–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return ConversationHandler.END
    finally:
        if conn:
            cur.close()
            conn.close()
    
    if not clients:
        await update.message.reply_text("–ù–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤!")
        return ConversationHandler.END
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–ª–∏–µ–Ω—Ç–∞–º–∏
    keyboard = []
    for client_id, client_name in clients:
        keyboard.append([InlineKeyboardButton(client_name, callback_data=f'view_{client_id}')])
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.message.reply_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –∫–ª–∏–µ–Ω—Ç–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —á–µ–∫–æ–≤:",
        reply_markup=reply_markup
    )
    return SELECTING_CLIENT_FOR_VIEW

async def show_client_receipts(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑ —á–µ–∫–æ–≤ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞"""
    query = update.callback_query
    await query.answer()
    
    try:
        client_id = int(query.data.split('_')[1])
        
        conn = get_connection()
        cur = conn.cursor()
        cur.execute("""
            SELECT photo_id, amount, date_added, debt_days 
            FROM receipts 
            WHERE client_id = ? 
            ORDER BY date_added DESC
        """, (client_id,))
        receipts = cur.fetchall()
    except sqlite3.Error as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —á–µ–∫–æ–≤: {e}")
        await query.edit_message_text("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —á–µ–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return ConversationHandler.END
    finally:
        if conn:
            cur.close()
            conn.close()
    
    if not receipts:
        await query.edit_message_text("–£ —ç—Ç–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞ –Ω–µ—Ç —á–µ–∫–æ–≤.")
        return ConversationHandler.END
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∂–¥—ã–π —á–µ–∫ –æ—Ç–¥–µ–ª—å–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
    for photo_id, amount, date_added, debt_days in receipts:
        # –í—ã—á–∏—Å–ª—è–µ–º –¥–∞—Ç—É –ø–æ–≥–∞—à–µ–Ω–∏—è –¥–æ–ª–≥–∞
        due_date = datetime.strptime(date_added, '%Y-%m-%d %H:%M:%S.%f') + timedelta(days=debt_days)
        
        caption = (f"–°—É–º–º–∞: {amount} —Ä—É–±.\n"
                   f"–î–∞—Ç–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è: {date_added}\n"
                   f"–°—Ä–æ–∫ –æ–ø–ª–∞—Ç—ã: {due_date}")
        
        try:
            await context.bot.send_photo(
                chat_id=query.message.chat_id,
                photo=photo_id,
                caption=caption
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–æ—Ç–æ —á–µ–∫–∞: {e}")
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    keyboard = [
        [KeyboardButton("üë§ –î–æ–±–∞–≤–∏—Ç—å –∫–ª–∏–µ–Ω—Ç–∞"), KeyboardButton("üìÑ –î–æ–±–∞–≤–∏—Ç—å —á–µ–∫")],
        [KeyboardButton("üëÅ –ü—Ä–æ—Å–º–æ—Ç—Ä —á–µ–∫–æ–≤"), KeyboardButton("‚è∞ –ü—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ –¥–æ–ª–≥–∏")],
        [KeyboardButton("üóë –£–¥–∞–ª–µ–Ω–∏–µ —á–µ–∫–æ–≤"), KeyboardButton("üí∞ –û–ø–ª–∞—Ç–∞ –¥–æ–ª–≥–æ–≤")]
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    
    await context.bot.send_message(
        chat_id=query.message.chat_id,
        text="–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
        reply_markup=reply_markup
    )
    
    return ConversationHandler.END

async def show_overdue_debts(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö –¥–æ–ª–≥–æ–≤"""
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {update.effective_user.id} –∑–∞–ø—Ä–æ—Å–∏–ª —Å–ø–∏—Å–æ–∫ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö –¥–æ–ª–≥–æ–≤")
    
    current_time = datetime.now()
    
    try:
        conn = get_connection()
        cur = conn.cursor()
        cur.execute("""
            SELECT 
                c.name, 
                r.amount, 
                r.date_added, 
                r.debt_days,
                COALESCE((
                    SELECT SUM(amount) 
                    FROM payments p 
                    WHERE p.client_id = r.client_id
                ), 0) as paid_amount
            FROM receipts r
            JOIN clients c ON r.client_id = c.id
            WHERE datetime(r.date_added, '+' || r.debt_days || ' days') < ?
        """, (current_time,))
        overdue = cur.fetchall()
    except sqlite3.Error as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö –¥–æ–ª–≥–æ–≤: {e}")
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –¥–æ–ª–≥–æ–≤.")
        return
    finally:
        if conn:
            cur.close()
            conn.close()
    
    keyboard = [
        [KeyboardButton("üë§ –î–æ–±–∞–≤–∏—Ç—å –∫–ª–∏–µ–Ω—Ç–∞"), KeyboardButton("üìÑ –î–æ–±–∞–≤–∏—Ç—å —á–µ–∫")],
        [KeyboardButton("üëÅ –ü—Ä–æ—Å–º–æ—Ç—Ä —á–µ–∫–æ–≤"), KeyboardButton("‚è∞ –ü—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ –¥–æ–ª–≥–∏")],
        [KeyboardButton("üóë –£–¥–∞–ª–µ–Ω–∏–µ —á–µ–∫–æ–≤"), KeyboardButton("üí∞ –û–ø–ª–∞—Ç–∞ –¥–æ–ª–≥–æ–≤")]
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    
    if not overdue:
        await update.message.reply_text(
            "–ù–µ—Ç –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö –¥–æ–ª–≥–æ–≤.",
            reply_markup=reply_markup
        )
        return
    
    message = "–ü—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ –¥–æ–ª–≥–∏:\n\n"
    for name, amount, date_added, days, paid_amount in overdue:
        if amount > paid_amount:
            remaining_debt = amount - paid_amount
            due_date = datetime.strptime(date_added, '%Y-%m-%d %H:%M:%S.%f') + timedelta(days=days)
            
            message += f"–ö–ª–∏–µ–Ω—Ç: {name}\n"
            message += f"–û—Å—Ç–∞–≤—à–∏–π—Å—è –¥–æ–ª–≥: {remaining_debt} —Ä—É–±.\n"
            message += f"–î–∞—Ç–∞ —á–µ–∫–∞: {date_added}\n"
            message += f"–°—Ä–æ–∫ –æ–ø–ª–∞—Ç—ã: {due_date}\n\n"
    
    await update.message.reply_text(
        message,
        reply_markup=reply_markup
    )

async def delete_receipt_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ —É–¥–∞–ª–µ–Ω–∏—è —á–µ–∫–∞ - –≤—ã–±–æ—Ä –∫–ª–∏–µ–Ω—Ç–∞"""
    try:
        conn = get_connection()
        cur = conn.cursor()
        cur.execute("SELECT id, name FROM clients")
        clients = cur.fetchall()
    except sqlite3.Error as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –∫–ª–∏–µ–Ω—Ç–æ–≤: {e}")
        await update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∫–ª–∏–µ–Ω—Ç–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return ConversationHandler.END
    finally:
        if conn:
            cur.close()
            conn.close()
    
    if not clients:
        await update.message.reply_text("–ù–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤!")
        return ConversationHandler.END
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–ª–∏–µ–Ω—Ç–∞–º–∏
    keyboard = []
    for client_id, client_name in clients:
        keyboard.append([InlineKeyboardButton(client_name, callback_data=f'del_client_{client_id}')])
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.message.reply_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –∫–ª–∏–µ–Ω—Ç–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —á–µ–∫–∞:",
        reply_markup=reply_markup
    )
    return SELECTING_CLIENT_FOR_DELETE

async def show_receipts_for_delete(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑ —á–µ–∫–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è"""
    query = update.callback_query
    await query.answer()
    
    try:
        client_id = int(query.data.split('_')[2])
        context.user_data['selected_client_id'] = client_id
        
        conn = get_connection()
        cur = conn.cursor()
        cur.execute("""
            SELECT id, photo_id, amount, date_added 
            FROM receipts 
            WHERE client_id = ?
        """, (client_id,))
        receipts = cur.fetchall()
    except sqlite3.Error as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —á–µ–∫–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è: {e}")
        await query.edit_message_text("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —á–µ–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return ConversationHandler.END
    finally:
        if conn:
            cur.close()
            conn.close()
    
    if not receipts:
        await query.edit_message_text("–£ —ç—Ç–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞ –Ω–µ—Ç —á–µ–∫–æ–≤.")
        return ConversationHandler.END
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∂–¥—ã–π —á–µ–∫ —Å –∫–Ω–æ–ø–∫–æ–π —É–¥–∞–ª–µ–Ω–∏—è
    for receipt_id, photo_id, amount, date_added in receipts:
        keyboard = [[InlineKeyboardButton(
            "–£–¥–∞–ª–∏—Ç—å —ç—Ç–æ—Ç —á–µ–∫", 
            callback_data=f'delete_receipt_{receipt_id}'
        )]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        caption = f"–°—É–º–º–∞: {amount} —Ä—É–±.\n–î–∞—Ç–∞: {date_added}"
        
        try:
            await context.bot.send_photo(
                chat_id=query.message.chat_id,
                photo=photo_id,
                caption=caption,
                reply_markup=reply_markup
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–æ—Ç–æ —á–µ–∫–∞: {e}")
    
    return SELECTING_RECEIPT_FOR_DELETE

async def delete_receipt(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–£–¥–∞–ª–µ–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —á–µ–∫–∞"""
    query = update.callback_query
    await query.answer()
    
    try:
        receipt_id = int(query.data.split('_')[2])
        
        conn = get_connection()
        cur = conn.cursor()
        cur.execute("DELETE FROM receipts WHERE id = ?", (receipt_id,))
        conn.commit()
        
        logger.info(f"–£–¥–∞–ª–µ–Ω —á–µ–∫ —Å ID: {receipt_id}")
    except sqlite3.Error as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —á–µ–∫–∞: {e}")
        await query.edit_message_text("–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —á–µ–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return ConversationHandler.END
    finally:
        if conn:
            cur.close()
            conn.close()
    
    keyboard = [
        [KeyboardButton("üë§ –î–æ–±–∞–≤–∏—Ç—å –∫–ª–∏–µ–Ω—Ç–∞"), KeyboardButton("üìÑ –î–æ–±–∞–≤–∏—Ç—å —á–µ–∫")],
        [KeyboardButton("üëÅ –ü—Ä–æ—Å–º–æ—Ç—Ä —á–µ–∫–æ–≤"), KeyboardButton("‚è∞ –ü—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ –¥–æ–ª–≥–∏")],
        [KeyboardButton("üóë –£–¥–∞–ª–µ–Ω–∏–µ —á–µ–∫–æ–≤"), KeyboardButton("üí∞ –û–ø–ª–∞—Ç–∞ –¥–æ–ª–≥–æ–≤")]
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    
    await query.edit_message_text(
        "–ß–µ–∫ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω!",
        reply_markup=reply_markup
    )
    return ConversationHandler.END

async def pay_debt_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –æ–ø–ª–∞—Ç—ã –¥–æ–ª–≥–∞"""
    try:
        conn = get_connection()
        cur = conn.cursor()
        cur.execute("""
            SELECT 
                c.id, 
                c.name, 
                TOTAL(r.amount) - COALESCE((
                    SELECT TOTAL(amount) 
                    FROM payments p 
                    WHERE p.client_id = c.id
                ), 0) as debt
            FROM clients c
            LEFT JOIN receipts r ON c.id = r.client_id
            GROUP BY c.id, c.name
            HAVING debt > 0
        """)
        clients = cur.fetchall()
    except sqlite3.Error as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –¥–æ–ª–∂–Ω–∏–∫–æ–≤: {e}")
        await update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –¥–æ–ª–∂–Ω–∏–∫–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return ConversationHandler.END
    finally:
        if conn:
            cur.close()
            conn.close()
    
    if not clients:
        await update.message.reply_text("–ù–µ—Ç –∫–ª–∏–µ–Ω—Ç–æ–≤ —Å –¥–æ–ª–≥–∞–º–∏.")
        return ConversationHandler.END
    
    keyboard = []
    for client_id, name, debt in clients:
        keyboard.append([InlineKeyboardButton(
            f"{name} (–î–æ–ª–≥: {debt} —Ä—É–±.)", 
            callback_data=f'pay_{client_id}'
        )])
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.message.reply_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –∫–ª–∏–µ–Ω—Ç–∞ –¥–ª—è –æ–ø–ª–∞—Ç—ã –¥–æ–ª–≥–∞:",
        reply_markup=reply_markup
    )
    return SELECTING_CLIENT_FOR_PAYMENT

async def add_payment_amount(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–í—ã–±–æ—Ä —Å—É–º–º—ã –ø–ª–∞—Ç–µ–∂–∞"""
    query = update.callback_query
    await query.answer()
    
    try:
        client_id = int(query.data.split('_')[1])
        context.user_data['selected_client_id'] = client_id
        
        await query.edit_message_text("–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –æ–ø–ª–∞—Ç—ã:")
        return ADDING_PAYMENT_AMOUNT
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –∫–ª–∏–µ–Ω—Ç–∞ –¥–ª—è –æ–ø–ª–∞—Ç—ã: {e}")
        await query.edit_message_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return ConversationHandler.END

async def process_payment(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–ª–∞—Ç–µ–∂–∞"""
    try:
        amount = float(update.message.text.replace(',', '.'))
        client_id = context.user_data['selected_client_id']
        
        conn = get_connection()
        cur = conn.cursor()
        
        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞
        cur.execute("""
            INSERT INTO payments (client_id, amount, date)
            VALUES (?, ?, ?)
        """, (client_id, amount, datetime.now()))
        
        # –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–ª–∏–µ–Ω—Ç–µ –∏ –æ—Å—Ç–∞—Ç–∫–µ –¥–æ–ª–≥–∞
        cur.execute("""
            SELECT 
                c.name, 
                TOTAL(r.amount) - (COALESCE((
                    SELECT TOTAL(amount) 
                    FROM payments p 
                    WHERE p.client_id = c.id
                ), 0) + ?) as remaining_debt
            FROM clients c
            JOIN receipts r ON c.id = r.client_id
            WHERE c.id = ?
            GROUP BY c.name
        """, (amount, client_id))
        
        result = cur.fetchone()
        client_name, remaining_debt = result if result else (None, 0)
        
        conn.commit()
        
        logger.info(f"–î–æ–±–∞–≤–ª–µ–Ω –ø–ª–∞—Ç–µ–∂ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞ {client_id}: {amount} —Ä—É–±.")
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        keyboard = [
            [KeyboardButton("üë§ –î–æ–±–∞–≤–∏—Ç—å –∫–ª–∏–µ–Ω—Ç–∞"), KeyboardButton("üìÑ –î–æ–±–∞–≤–∏—Ç—å —á–µ–∫")],
            [KeyboardButton("üëÅ –ü—Ä–æ—Å–º–æ—Ç—Ä —á–µ–∫–æ–≤"), KeyboardButton("‚è∞ –ü—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ –¥–æ–ª–≥–∏")],
            [KeyboardButton("üóë –£–¥–∞–ª–µ–Ω–∏–µ —á–µ–∫–æ–≤"), KeyboardButton("üí∞ –û–ø–ª–∞—Ç–∞ –¥–æ–ª–≥–æ–≤")]
        ]
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        
        message = f"–û–ø–ª–∞—Ç–∞ –≤ —Ä–∞–∑–º–µ—Ä–µ {amount} —Ä—É–±. –¥–æ–±–∞–≤–ª–µ–Ω–∞ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞ {client_name}\n"
        if remaining_debt and remaining_debt > 0:
            message += f"–û—Å—Ç–∞–≤—à–∏–π—Å—è –¥–æ–ª–≥: {remaining_debt} —Ä—É–±."
        else:
            message += "–î–æ–ª–≥ –ø–æ–ª–Ω–æ—Å—Ç—å—é –ø–æ–≥–∞—à–µ–Ω!"
        
        await update.message.reply_text(
            message,
            reply_markup=reply_markup)
    except ValueError:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É.")
        return ADDING_PAYMENT_AMOUNT
    except sqlite3.Error as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–ª–∞—Ç–µ–∂–∞: {e}")
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–ª–∞—Ç–µ–∂–∞.")
        return ConversationHandler.END
    finally:
        if conn:
            cur.close()
            conn.close()
    
    return ConversationHandler.END

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û—Ç–º–µ–Ω–∞ —Ç–µ–∫—É—â–µ–π –æ–ø–µ—Ä–∞—Ü–∏–∏"""
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {update.effective_user.id} –æ—Ç–º–µ–Ω–∏–ª –æ–ø–µ—Ä–∞—Ü–∏—é")
    
    keyboard = [
        [KeyboardButton("üë§ –î–æ–±–∞–≤–∏—Ç—å –∫–ª–∏–µ–Ω—Ç–∞"), KeyboardButton("üìÑ –î–æ–±–∞–≤–∏—Ç—å —á–µ–∫")],
        [KeyboardButton("üëÅ –ü—Ä–æ—Å–º–æ—Ç—Ä —á–µ–∫–æ–≤"), KeyboardButton("‚è∞ –ü—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ –¥–æ–ª–≥–∏")],
        [KeyboardButton("üóë –£–¥–∞–ª–µ–Ω–∏–µ —á–µ–∫–æ–≤"), KeyboardButton("üí∞ –û–ø–ª–∞—Ç–∞ –¥–æ–ª–≥–æ–≤")]
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    
    await update.message.reply_text(
        '–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.',
        reply_markup=reply_markup
    )
    return ConversationHandler.END

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–∞ –±–æ—Ç–∞
    token = os.environ.get('BOT_TOKEN')
    if not token:
        logger.error("–ù–µ —É–∫–∞–∑–∞–Ω —Ç–æ–∫–µ–Ω Telegram Bot. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è BOT_TOKEN.")
        return
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    try:
        init_db()
    except Exception as db_error:
        logger.error(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {db_error}")
        return
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –±–æ—Ç–∞
    try:
        application = Application.builder().token(token).build()
        
        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥
        application.add_handler(CommandHandler('start', start))
        
        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞
        add_client_conv = ConversationHandler(
            entry_points=[MessageHandler(filters.Regex('^üë§ –î–æ–±–∞–≤–∏—Ç—å –∫–ª–∏–µ–Ω—Ç–∞$'), add_client_start)],
            states={
                ADDING_CLIENT_NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, add_client_name)],
                ADDING_CLIENT_PHONE: [MessageHandler(filters.TEXT & ~filters.COMMAND, add_client_phone)]
            },
            fallbacks=[CommandHandler('cancel', cancel)]
        )
        application.add_handler(add_client_conv)
        
        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —á–µ–∫–∞
        add_receipt_conv = ConversationHandler(
            entry_points=[MessageHandler(filters.Regex('^üìÑ –î–æ–±–∞–≤–∏—Ç—å —á–µ–∫$'), add_receipt_start)],
            states={
                SELECTING_CLIENT_FOR_RECEIPT: [
                    CallbackQueryHandler(select_client_for_receipt, pattern='^client_')
                ],
                UPLOADING_RECEIPT: [MessageHandler(filters.PHOTO, handle_receipt_photo)],
                ADDING_RECEIPT_AMOUNT: [MessageHandler(filters.TEXT & ~filters.COMMAND, add_receipt_amount)],
                ADDING_DEBT_DAYS: [MessageHandler(filters.TEXT & ~filters.COMMAND, add_receipt_days)]
            },
            fallbacks=[CommandHandler('cancel', cancel)]
        )
        application.add_handler(add_receipt_conv)
        
        # –ü—Ä–æ—Å–º–æ—Ç—Ä —á–µ–∫–æ–≤
        view_receipts_conv = ConversationHandler(
            entry_points=[MessageHandler(filters.Regex('^üëÅ –ü—Ä–æ—Å–º–æ—Ç—Ä —á–µ–∫–æ–≤$'), view_receipts_start)],
            states={
                SELECTING_CLIENT_FOR_VIEW: [CallbackQueryHandler(show_client_receipts, pattern='^view_')]
            },
            fallbacks=[CommandHandler('cancel', cancel)]
        )
        application.add_handler(view_receipts_conv)
        
        # –ü—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ –¥–æ–ª–≥–∏
        application.add_handler(MessageHandler(filters.Regex('^‚è∞ –ü—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ –¥–æ–ª–≥–∏$'), show_overdue_debts))
        
        # –£–¥–∞–ª–µ–Ω–∏–µ —á–µ–∫–∞
        delete_receipt_conv = ConversationHandler(
            entry_points=[MessageHandler(filters.Regex('^üóë –£–¥–∞–ª–µ–Ω–∏–µ —á–µ–∫–æ–≤$'), delete_receipt_start)],
            states={
                SELECTING_CLIENT_FOR_DELETE: [
                    CallbackQueryHandler(show_receipts_for_delete, pattern='^del_client_')
                ],
                SELECTING_RECEIPT_FOR_DELETE: [
                    CallbackQueryHandler(delete_receipt, pattern='^delete_receipt_')
                ]
            },
            fallbacks=[CommandHandler('cancel', cancel)]
        )
        application.add_handler(delete_receipt_conv)
        
        # –û–ø–ª–∞—Ç–∞ –¥–æ–ª–≥–∞
        pay_debt_conv = ConversationHandler(
            entry_points=[MessageHandler(filters.Regex('^üí∞ –û–ø–ª–∞—Ç–∞ –¥–æ–ª–≥–æ–≤$'), pay_debt_start)],
            states={
                SELECTING_CLIENT_FOR_PAYMENT: [
                    CallbackQueryHandler(add_payment_amount, pattern='^pay_')
                ],
                ADDING_PAYMENT_AMOUNT: [
                    MessageHandler(filters.TEXT & ~filters.COMMAND, process_payment)
                ]
            },
            fallbacks=[CommandHandler('cancel', cancel)]
        )
        application.add_handler(pay_debt_conv)
        
        # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
        logger.info("–ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
        application.run_polling(drop_pending_updates=True)
    
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {e}")

if __name__ == '__main__':
    main()
